# Navigation
project() {
  eval "cd ~/Code/${1}"
}

# get the git branch and output it
parse_git_branch() {
   git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

# Run PHPUnit without having to type the complete path
function phpunit() {
  phpVersion="$1"
  if [ "$phpVersion" = "" ]; then
    phpVersion=""
  fi

  exec "php${phpVersion} ./vendor/bin/phpunit"
}

# Enable/disable xdebug
function xdebug() {
  sudo -v

  phpVersion="$1"
  if [ "$phpVersion" = "" ]; then
    phpVersion=""
  fi

  iniFileLocation="/etc/php/$phpVersion/mods-available/xdebug.ini";
   
  currentLine=`cat $iniFileLocation | grep xdebug.so`

  if [[ $currentLine =~ ^#zend_extension ]];
  then
    sed -i -e 's/^#zend_extension/zend_extension/g' $iniFileLocation
    echo "xdebug is now active";
  else
    sed -i -e 's/^zend_extension/#zend_extension/g' $iniFileLocation
    echo "xdebug is now inactive";
  fi
}

# Configure a PHP version as default
function phpv() {
  sudo -v

  phpVersion="$1"

  eval "sudo update-alternatives --set php /usr/bin/php$phpVersion";
  eval "sudo update-alternatives --set phar /usr/bin/phar$phpVersion";
  eval "sudo update-alternatives --set phar.phar /usr/bin/phar.phar$phpVersion";
  eval "sudo update-alternatives --set phpize /usr/bin/phpize$phpVersion";
  eval "sudo update-alternatives --set php-config /usr/bin/php-config$phpVersion";
  eval "sudo pear config-set php_suffix $phpVersion";
  eval "sudo pecl config-set php_bin /usr/bin/php$phpVersion";
  eval "sudo pecl config-set php_ini /etc/php/%phpVersion/cli/php.ini";
  echo "PHP version set to $phpVersion";
}

# Git
function commit() {
  files="$@"

  if [ "$files" = "" ]; then
    files="."
  fi

  eval "git add ${files}"
  eval "git commit"
}

function checkout() {
  branch="$1"
  eval "git checkout ${branch}"
}
function merge() {
  branch="$1"
  eval "git merge ${branch}"
}

# Services control
function start() {
  sudo -v
  for service in "$@"; do
  eval "sudo service ${service} start"
  done
}

function stop() {
  sudo -v
  for service in "$@"; do
    eval "sudo service ${service} stop"
  done
}

function reload() {
  sudo -v
  for service in "$@"; do
    eval "sudo service ${service} reload"
  done
}

function restart() {
  sudo -v
  for service in "$@"; do
    eval "sudo service ${service} restart"
  done
}

# Run Laravel scheduler manually
function scheduler() {
  php="php$1"

  while :; do
    eval "${php} artisan schedule:run"
  echo "Sleeping 60 seconds..."
    sleep 60
  done
}

# Helpers
function now() {
  now=$(date +"%T")
  echo "Current time: ${now}"
}

function weather() {
  city="$@"

  if [ -z "$city" ]; then
    city="office"
  fi

  if [ "$city" = "home" ]; then
    city="Krimpen aan den IJssel"
  fi

  if [ "$city" = "office" ]; then
    city="Capelle aan den IJssel"
  fi

  city=${city// /'%20'}

  eval "curl https://wttr.in/${city}?TF"
}

function qr() {
  eval "curl https://qrenco.de/${1}"
}

function shortlink() {
  eval "curl -F url=${1} https://shorta.link"
}

# Generate a random string
function random() {
  amountOfCharacters="$1"

  if [ "$amountOfCharacters" = "" ]; then
    amountOfCharacters="32"
  fi

  eval "cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w ${amountOfCharacters} | head -n 1"
}

